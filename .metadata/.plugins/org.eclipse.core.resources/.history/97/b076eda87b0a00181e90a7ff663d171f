package mountain;

import java.util.HashMap;

import fractal.Fractal;
import fractal.TurtleGraphics;

public class Mountain2 extends Fractal {
	private Point a,b,c;
	private HashMap<Side, Point> smap = new HashMap<Side, Point>();

	public Mountain2(Point a, Point b, Point c) {
		super();
		this.a = a;
		this.b = b;
		this.c = c;
//		smap.put(new Side(a,b),middle(a,b,10.0));
//		smap.put(new Side(a,b),middle(a,b,10.0));
//		smap.put(new Side(a,b),middle(a,b,10.0));

	}

	@Override
	public String getTitle() {
		return "Mountain";
	}

	// D5
	public void draw(TurtleGraphics turtle) {
		fractalTriangle(turtle, order, a,b,c, 10.0);
	}

	public void fractalTriangle(TurtleGraphics turtle, int order, Point p1, Point p2, Point p3, double d) {
		if (order == 0) {
			turtle.moveTo(p1.getX(),p1.getY());
			turtle.penDown(); // is set as true when creating a turtle, just for
								// backup.
			turtle.forwardTo(p2.getX(),p2.getY());
			turtle.forwardTo(p3.getX(),p3.getY());
			turtle.forwardTo(p1.getX(),p1.getY());
		} else {
			// change the points to the new values, i.e. the middle of where
			// point a meets point b
			// cast randfunc in randomutilities to int. (Point only accepts
			// integers)
			// Draw new triangles (4)
			Point AmB;
			Point BmC = middle(p2,p3,d);
			Point CmA = middle(p3,p1,d);
			Side ab = new Side(p1,p2);
			Side bc = new Side(p2,p3);
			Side ca = new Side(p3,p1);
			if(smap.containsKey(ab)){
				AmB = smap.get(ab);
				smap.remove(ab);
			} else{
				AmB = middle(p1,p2,d);
				smap.put(new Side(p1,AmB), middle(p1,AmB,d));
			}
			
			for(Side s:smap.keySet()){
				if(s.equals(new Side(p1,p2))){
					AmB = smap.get(s);
					smap.remove(s);
				} 
				if(s.equals(new Side(p2,p3))){
					BmC = smap.get(s);
					smap.remove(s);
					
				} 
				if (s.equals(new Side(p3,p1))){
					CmA = smap.get(s);
					smap.remove(s);
				} 
			}
			smap.put(new Side(p1,AmB),middle(p1,AmB,d));
			smap.put(new Side(p1,AmB),middle(p1,AmB,d));
			smap.put(new Side(p1,AmB),middle(p1,AmB,d));
			smap.put(new Side(p1,AmB),middle(p1,AmB,d));
			smap.put(new Side(p1,AmB),middle(p1,AmB,d));
			smap.put(new Side(p1,AmB),middle(p1,AmB,d));
			smap.put(new Side(p1,AmB),middle(p1,AmB,d));
			smap.put(new Side(p1,AmB),middle(p1,AmB,d));
			smap.put(new Side(p1,AmB),middle(p1,AmB,d));

			fractalTriangle(turtle, order - 1,a1,a2,a3,d / 2);
			fractalTriangle(turtle, order - 1,b1,b2,b3, d / 2);
			fractalTriangle(turtle, order - 1,c1,c2,c3, d / 2);
			fractalTriangle(turtle, order - 1,d1,d2,d3, d / 2);
		}
	}

	private Point middle(Point p1, Point p2, double d) {
		return new Point((p1.getX() + p2.getX()) / 2, ((p1.getY() + p2.getY()) / 2 + (int)RandomUtilities.randFunc(d)));
	}
}
