package mountain;

import java.util.ArrayList;

import javax.print.attribute.standard.Sides;

import fractal.*;

public class Mountain3 extends Fractal {
	Point p1, p2, p3;
	ArrayList<Side2> sides;

	/**
	 * Creates an object to handle fractal mountain
	 */
	public Mountain3(Point p1, Point p2, Point p3) {
		super();
		this.p1 = p1;
		this.p2 = p2;
		this.p3 = p3;
		// flytta turtle till startpunkt
	}

	@Override
	public String getTitle() {
		return "Rekursivt Berg";
	}

	@Override
	public void draw(TurtleGraphics g) {
		sides = new ArrayList<Side>();
		FractalTriangle(g, order, p1, p2, p3, 10.0);

	}

	private void FractalTriangle(TurtleGraphics g, int order, Point a, Point b, Point c, double dev) {
		if (order == 0) {
			// Bara rita triangel
			g.moveTo(c.getX(), c.getY());
			g.forwardTo(a.getX(), a.getY());
			g.forwardTo(b.getX(), b.getY());
			g.forwardTo(c.getX(), c.getY());
		} else {
			// Byt ut mot fyra mindre trianglar
		
			Point AB = new Point((a.getX() + b.getX()) / 2, (a.getY() + b.getY()) / 2 + RandomUtilities.randFunc(dev));
			Point BC = new Point((b.getX() + c.getX()) / 2, (b.getY() + c.getY()) / 2 + RandomUtilities.randFunc(dev));
			Point AC = new Point((a.getX() + c.getX()) / 2, (a.getY() + c.getY()) / 2 + RandomUtilities.randFunc(dev));
			
			for(Side s : sides){
				if(s.p1 == a && s.p2 == b){
					AB = s.m;
				}
				if(s.p1 == b && s.p2 == c){
					BC = s.m;
				}
				if(s.p1 == a && s.p2 == c ){
					AC = s.m;
				}
			}
			
			sides.add(new Side2 (a, b, AB));
			sides.add(new Side2 (b, c, BC));
			sides.add(new Side2 (a, c, AC));
			
			FractalTriangle(g, order - 1, a, AB, AC, dev / 2);
			FractalTriangle(g, order - 1, b, AB, BC, dev / 2);
			FractalTriangle(g, order - 1, c, AC, BC, dev / 2);
			FractalTriangle(g, order - 1, AB, AC, BC, dev / 2);
		}
	}

}