package mountain;

import java.util.HashMap;

import fractal.Fractal;
import fractal.TurtleGraphics;

public class Mountain extends Fractal {
	private Side ab;
	private Side bc;
	private Side ca;
	private static double d = 10.0;
	private HashMap<Side, Point> smap = new HashMap<Side, Point>();

	public Mountain(Side ab, Side bc, Side ca) {
		super();
		this.ab = ab;
		this.bc = bc;
		this.ca = ca;
		smap.put(ab, new Point((ab.getP1().getX() + ab.getP2().getX()) / 2,
				(ab.getP1().getY() + ab.getP2().getY()) / 2 + (int) RandomUtilities.randFunc(d)));
		smap.put(bc, new Point((bc.getP1().getX() + bc.getP2().getX()) / 2,
				(bc.getP1().getY() + bc.getP2().getY()) / 2 + (int) RandomUtilities.randFunc(d)));
		smap.put(ca, new Point((ca.getP1().getX() + ca.getP2().getX()) / 2,
				(ca.getP1().getY() + ca.getP2().getY()) / 2 + (int) RandomUtilities.randFunc(d)));

	}

	@Override
	public String getTitle() {
		return "Mountain";
	}
	// D3

	// turtle.moveTo(turtle.getWidth() / 2.0 - length / 2.0,
	// turtle.getHeight() / 2.0 + Math.sqrt(3.0) * length / 4.0);

	// public void draw(TurtleGraphics turtle) {
	// fractalTriangle(turtle,order,pa,pb,pc);
	// }
	//
	// /*
	// * Recursive method: Draws a recursive triangle of the mountain.
	// */
	// private void fractalTriangle(TurtleGraphics turtle, int order, Point a,
	// Point b, Point c) {
	// if(order==0){
	// turtle.moveTo(a.getX(),a.getY());
	// turtle.penDown(); // set as true when creating a turtle, just for backup.
	// turtle.forwardTo(b.getX(),b.getY());
	// turtle.forwardTo(c.getX(),c.getY());
	// turtle.forwardTo(a.getX(),a.getY());
	// } else {
	// // change the points to the new values, i.e. the middle of where point a
	// meets point b
	// Point AmB = new Point((a.getX()+b.getX())/2,(a.getY()+b.getY())/2);
	// Point BmC = new Point((b.getX()+c.getX())/2,(b.getY()+c.getY())/2);
	// Point CmA = new Point((c.getX()+a.getX())/2,(c.getY()+a.getY())/2);
	// // Draw new triangles (4)
	// fractalTriangle(turtle,order - 1,AmB,BmC,CmA);
	// fractalTriangle(turtle,order - 1,AmB,CmA,a);
	// fractalTriangle(turtle,order - 1,AmB,b,BmC);
	// fractalTriangle(turtle,order - 1,BmC,c,CmA);
	// }
	//
	// }

	// D4
	// public void draw(TurtleGraphics turtle) {
	// fractalTriangle(turtle,order,pa,pb,pc,100.0);
	// }
	//
	// /*
	// * Recursive method: Draws a recursive triangle of the mountain.
	// */
	// private void fractalTriangle(TurtleGraphics turtle, int order, Point a,
	// Point b, Point c,double d) {
	// if(order==0){
	// turtle.moveTo(a.getX(),a.getY());
	// turtle.penDown(); // set as true when creating a turtle, just for backup.
	// turtle.forwardTo(b.getX(),b.getY());
	// turtle.forwardTo(c.getX(),c.getY());
	// turtle.forwardTo(a.getX(),a.getY());
	// } else {
	// // change the points to the new values, i.e. the middle of where point a
	// meets point b
	// // cast randfunc in randomutilities to int. (Point only accepts integers)
	// Point AmB = new
	// Point((a.getX()+b.getX())/2,(a.getY()+b.getY())/2+(int)RandomUtilities.randFunc(d));
	// Point BmC = new
	// Point((b.getX()+c.getX())/2,(b.getY()+c.getY())/2+(int)RandomUtilities.randFunc(d));
	// Point CmA = new
	// Point((c.getX()+a.getX())/2,(c.getY()+a.getY())/2+(int)RandomUtilities.randFunc(d));
	// // Draw new triangles (4)
	// fractalTriangle(turtle,order - 1,AmB,BmC,CmA,d/2);
	// fractalTriangle(turtle,order - 1,AmB,CmA,a,d/2);
	// fractalTriangle(turtle,order - 1,AmB,b,BmC,d/2);
	// fractalTriangle(turtle,order - 1,BmC,c,CmA,d/2);
	// }
	//
	// }

	// D5
	public void draw(TurtleGraphics turtle) {
		fractalTriangle(turtle, order, ab, bc, ca);
	}

	public void fractalTriangle(TurtleGraphics turtle, int order, Side a, Side b, Side c) {
		if (order == 0) {
			turtle.moveTo(a.getP1().getX(), a.getP2().getY());
			turtle.penDown(); // is set as true when creating a turtle, just for
								// backup.
			turtle.forwardTo(a.getP2().getX(), a.getP2().getY());
			turtle.forwardTo(b.getP2().getX(), b.getP2().getY());
			turtle.forwardTo(c.getP2().getX(), c.getP2().getY());
		} else {
			// change the points to the new values, i.e. the middle of where
			// point a meets point b
			// cast randfunc in randomutilities to int. (Point only accepts
			// integers)
			// Draw new triangles (4)
			Side AmB;
			Side BmC;
			Side Cma;
			if(smap.containsKey(ab)){
				AmB = new Side(ab.getP1(),smap.get(ab));
				smap.remove(ab);
			} else{
				AmB = new Side(ab.getP1(),new Point((ab.getP1().getX() + ab.getP2().getX()) / 2,
						(ab.getP1().getY() + ab.getP2().getY()) / 2 + (int) RandomUtilities.randFunc(d))));
				smap.put(AmB, value)
				
			}
			fractalTriangle(turtle, order - 1, AmB, BmC, CmA, d / 2);
			fractalTriangle(turtle, order - 1, AmB, CmA, a, d / 2);
			fractalTriangle(turtle, order - 1, AmB, b, BmC, d / 2);
			fractalTriangle(turtle, order - 1, BmC, c, CmA, d / 2);
		}
	}
}
